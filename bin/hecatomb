#!/usr/bin/env python

"""
Command-line interface for installing and running hecatomb.

Michael Roach, Q2 2021
"""


import sys
import os
import subprocess
import yaml
import glob
from shutil import copyfile
from time import localtime, strftime

import click


def snake_base(rel_path):
    return os.path.join(os.path.dirname(os.path.realpath(__file__)), rel_path)


def print_version():
    with open(snake_base(os.path.join('..','hecatomb.VERSION')), 'r') as f:
        version = f.readline()
    click.echo("""
\b
██╗  ██╗███████╗ ██████╗ █████╗ ████████╗ ██████╗ ███╗   ███╗██████╗
██║  ██║██╔════╝██╔════╝██╔══██╗╚══██╔══╝██╔═══██╗████╗ ████║██╔══██╗
███████║█████╗  ██║     ███████║   ██║   ██║   ██║██╔████╔██║██████╔╝
██╔══██║██╔══╝  ██║     ██╔══██║   ██║   ██║   ██║██║╚██╔╝██║██╔══██╗
██║  ██║███████╗╚██████╗██║  ██║   ██║   ╚██████╔╝██║ ╚═╝ ██║██████╔╝
╚═╝  ╚═╝╚══════╝ ╚═════╝╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═╝     ╚═╝╚═════╝
""", err=True)
    click.echo('\n' + 'Hecatomb version ' + version, err=True)



def echo_click(msg, log=None):
    click.echo(msg, nl=False, err=True)
    if log:
        with open(log, 'a') as l:
            l.write(msg)


def msg(err_message, log=None):
    tstamp = strftime('[%Y:%m:%d %H:%M:%S] ', localtime())
    echo_click(tstamp + err_message + '\n', log=log)


def msg_box(splash, errmsg=None, log=None):
    msg('-' * (len(splash) + 4), log=log)
    msg(f'| {splash} |', log=log)
    msg(('-' * (len(splash) + 4)), log=log)
    if errmsg:
        echo_click('\n' + errmsg + '\n', log=log)


def default_to_ouput(ctx, param, value):
    """Callback for --configfile and --snake-dir; place value in output directory unless specified"""
    if param.default == value:
        return os.path.join(ctx.params['output'], value)
    return value


def copy_config(local_config, system_config=snake_base(os.path.join('..', 'snakemake', 'config', 'config.yaml'))):
    if not os.path.isfile(local_config):
        msg(f'Copying system default config to {local_config}')
        if len(os.path.dirname(local_config)) > 0:
            os.makedirs(os.path.dirname(local_config), exist_ok=True)
        copyfile(system_config, local_config)
    else:
        msg(f'Config file {local_config} already exists. Using existing config file.')


def read_config(local_config):
    msg(f'Reading config file {local_config}')
    with open(local_config, 'r') as stream:
        _config = yaml.safe_load(stream)
    return _config


def write_config(_config, local_config):
    msg(f'Updating runtime config file {local_config}')
    with open(local_config, 'w') as stream:
        yaml.dump(_config, stream)


class OrderedCommands(click.Group):
    """Preserve the order of subcommands when printing --help"""
    def list_commands(self, ctx: click.Context):
        return list(self.commands)


def run_snakemake(configfile=None, snakefile_path=None, merge_config=None, threads=1, use_conda=False,
                  conda_frontend=None, conda_prefix=None, snake_default=None, log=None, snake_args=[]):
    """Run a Snakefile"""
    snake_command = ['snakemake', '-s', snakefile_path]

    # if using a configfile
    if configfile:
        # copy sys default config if needed
        copy_config(configfile)

        # read the config
        snake_config = read_config(configfile)

        # merge in command line config if provided
        if merge_config:
            snake_config.update(merge_config)

        # update the config file
        write_config(snake_config, configfile)

        # add config
        snake_command += ['--configfile', configfile]

        # display the runtime configuration
        msg_box('Runtime config', errmsg=yaml.dump(snake_config, Dumper=yaml.Dumper), log=log)

    # add threads
    if not '--profile' in snake_args:
        snake_command += ['--jobs', threads]

    # add conda args if using conda
    if use_conda:
        snake_command += ['--use-conda']
        if conda_frontend:
            snake_command += ['--conda-frontend', conda_frontend]
        if conda_prefix:
            snake_command += ['--conda-prefix', conda_prefix]

    # add snakemake default args
    if snake_default:
        snake_command += snake_default

    # add any additional snakemake commands
    snake_command += list(snake_args)

    # Run Snakemake!!!
    snake_command = ' '.join(str(s) for s in snake_command)
    msg_box('Snakemake command', errmsg=snake_command, log=log)
    if not subprocess.run(snake_command, shell=True).returncode == 0:
        msg('Error: Snakemake failed', log=log)
        sys.exit(1)
    else:
        msg('Snakemake finished successfully', log=log)
    return 0


def common_options(func):
    """Common options decorator for use with click commands."""
    options = [
        click.option('--output', help='Output directory', type=click.Path(dir_okay=True, writable=True, readable=True),
                     default='hecatomb.out', show_default=True),
        click.option('--configfile', default='hecatomb.config.yaml', type=click.Path(writable=True, readable=True),
                     help='Custom config file [default: (outputDir)/hecatomb.config.yaml]', show_default=False,
                     callback=default_to_ouput),
        click.option('--threads', help='Number of threads to use', default=32, show_default=True),
        click.option('--use-conda/--no-use-conda', default=True, help='Use conda for Snakemake rules',
                     show_default=True),
        click.option('--conda-frontend',
                     type=click.Choice(['mamba', 'conda'], case_sensitive=True),
                     default='mamba', help='Specify Conda frontend', show_default=True),
        click.option('--conda-prefix', default=snake_base(os.path.join('..', 'snakemake', 'conda')),
                     help='Custom conda env directory', type=click.Path(), show_default=False),
        click.option('--snake-default', multiple=True,
                     default=['--rerun-incomplete', '--printshellcmds', '--nolock', '--show-failed-logs'],
                     help="Customise Snakemake runtime args", show_default=True),
        click.option('--log', default='hecatomb.log', callback=default_to_ouput, hidden=True,
                     type=click.Path(writable=True, readable=True)),
        click.argument('snake_args', nargs=-1)
    ]
    for option in reversed(options):
        func = option(func)
    return func


@click.group(cls=OrderedCommands,context_settings=dict(help_option_names=["-h", "--help"]))
def cli():
    """Subcommand usage: hecatomb subcommand --help"""
    pass


EPILOG = """
\b
CLUSTER EXECUTION:
hecatomb run ... --profile [profile]
For information on Snakemake profiles see:
https://snakemake.readthedocs.io/en/stable/executing/cli.html#profiles
\b
RUN EXAMPLES:
Required:           hecatomb run --reads [file/dir]
Specify threads:    hecatomb run ... --threads [threads]
Disable conda:      hecatomb run ... --no-use-conda 
Change defaults:    hecatomb run ... --snake-default="-k --nolock"
Add Snakemake args: hecatomb run ... --dry-run --keep-going --touch
Specify stages:     hecatomb run ... all print_targets
Available stages:
    all                 Run everything (default)
    preprocessing       Preprocessing steps only
    assembly            Assembly steps (+ preprocessing)
    annotations         Read annotations (+ preprocessing)
    ctg_annotations     Contig annotations (+ preprocessing,assembly)
    print_stages        List available stages
"""


@click.command(epilog=EPILOG, context_settings=dict(help_option_names=["-h", "--help"], ignore_unknown_options=True))
@click.option('--reads', 'reads', help='Input file/directory', type=str, default=None, required=True)
@click.option('--preprocess', help='Preprocessing method', default='paired', show_default=True,
              type=click.Choice(['paired', 'single', 'longread', 'roundAB']))
@click.option('--search', help='MMSeqs search speed settings', default='sensitive',
              type=click.Choice(['fast', 'sensitive']), show_default=True)
@click.option('--host', help='Host genome name for filtering', default='human', show_default=True)
@common_options
def run(reads, preprocess, search, host, output, log, **kwargs):
    """Run Hecatomb"""

    merge_config = {
        'args': {
            'reads': reads,
            'output': output,
            'host': host,
            'preprocess': preprocess,
            'search': search,
            'log': log
        }
    }

    run_snakemake(
        snakefile_path=snake_base(os.path.join('..', 'snakemake', 'workflow', 'Hecatomb.smk')),
        merge_config=merge_config,
        log=log,
        **kwargs
    )


@click.command(epilog=EPILOG, context_settings=dict(help_option_names=["-h", "--help"], ignore_unknown_options=True))
@click.option('--preprocess', help='Preprocessing method', default='paired', show_default=True,
              type=click.Choice(['paired', 'single', 'longread', 'roundAB']))
@click.option('--search', help='MMSeqs search speed settings', default='sensitive',
              type=click.Choice(['fast', 'sensitive']), show_default=True)
@click.option('--host', help='Host genome name for filtering', default='human', show_default=True)
@common_options
def test(preprocess, search, host, output, log, **kwargs):
    """Run the Hecatomb test dataset"""

    reads = snake_base(os.path.join('..', 'test_data'))

    merge_config = {
        'args': {
            'reads': reads,
            'output': output,
            'host': host,
            'preprocess': preprocess,
            'search': search,
            'log': log
        }
    }

    run_snakemake(
        snakefile_path=snake_base(os.path.join('..', 'snakemake', 'workflow', 'Hecatomb.smk')),
        merge_config=merge_config,
        log=log,
        **kwargs
    )

@click.command(context_settings=dict(help_option_names=["-h", "--help"], ignore_unknown_options=True))
@common_options
def config(configfile, **kwargs):
    """Copy the system default config file"""
    copy_config(configfile)


@click.command(context_settings=dict(help_option_names=["-h", "--help"], ignore_unknown_options=True))
@common_options
def install(output, log, **kwargs):
    """Install the Hecatomb databases"""

    merge_config = {
        'args': {
            'output': output,
            'log': log
        }
    }
    run_snakemake(
        snakefile_path=snake_base(os.path.join('..', 'snakemake', 'workflow', 'DownloadDB.smk')),
        merge_config=merge_config,
        log=log,
        **kwargs
    )


@click.command(context_settings=dict(help_option_names=["-h", "--help"], ignore_unknown_options=True))
@click.option('--comb', multiple=True, required=True, show_default=False,
              help='Two or more Hecatomb output directories to combine. e.g. --comb dir1/ --comb dir2/ ...')
@common_options
def combine(comb, output, log, **kwargs):
    """Combine multiple Hecatomb runs"""

    merge_config = {
        'args': {
            'output': output,
            'combineRuns': list(comb),
            'log': log
        }
    }
    run_snakemake(
        snakefile_path=snake_base(os.path.join('..', 'snakemake', 'workflow', 'combineOutputs.smk')),
        merge_config=merge_config,
        log=log,
        **kwargs
    )


@click.command(context_settings=dict(help_option_names=["-h", "--help"], ignore_unknown_options=True))
@click.option('--host', help='Name for your host genome', show_default=False, required=True)
@click.option('--host-fa', help='Host genome fasta file', show_default=False, required=True)
@common_options
def add_host(host, host_fa, output, log, **kwargs):
    """Add a new host genome to use with Hecatomb"""

    merge_config = {
        'args': {
            'output': output,
            'hostFa': host_fa,
            'hostName': host,
            'log': log
        }
    }
    run_snakemake(
        snakefile_path=snake_base(os.path.join('..', 'snakemake', 'workflow', 'AddHost.smk')),
        merge_config=merge_config,
        log=log,
        **kwargs
    )


@click.command()
@common_options
def list_hosts(configfile, **kwargs):
    """List the available host genomes"""

    copy_config(configfile)
    with open(configfile, 'r') as f:
        config = yaml.safe_load(f)
    if config['Databases'] is None:
        DBDIR = snake_base(os.path.join('..', 'databases'))
    else:
        DBDIR = config['Databases']
    hostPath = os.path.join(DBDIR, "host", "*")
    hostFastas = list([os.path.basename(x) for x in glob.glob(hostPath)])
    try:
        hostFastas.remove('virus_shred.fasta.gz')
    except ValueError:
        pass
    msg_box('Available host genomes', '\n'.join(hostFastas))


cli.add_command(run)
cli.add_command(test)
cli.add_command(config)
cli.add_command(install)
cli.add_command(combine)
cli.add_command(add_host)
cli.add_command(list_hosts)


def main():
    print_version()
    cli()


if __name__ == '__main__':
    main()
